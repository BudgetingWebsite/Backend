/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.DefaultSchema;
import org.jooq.codegen.Keys;
import org.jooq.codegen.tables.Account.AccountPath;
import org.jooq.codegen.tables.Expense.ExpensePath;
import org.jooq.codegen.tables.records.BucketRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bucket extends TableImpl<BucketRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>BUCKET</code>
     */
    public static final Bucket BUCKET = new Bucket();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BucketRecord> getRecordType() {
        return BucketRecord.class;
    }

    /**
     * The column <code>BUCKET.UUID</code>.
     */
    public final TableField<BucketRecord, String> UUID = createField(DSL.name("UUID"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>BUCKET.OWNER</code>.
     */
    public final TableField<BucketRecord, String> OWNER = createField(DSL.name("OWNER"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>BUCKET.NAME</code>.
     */
    public final TableField<BucketRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>BUCKET.SHARE</code>.
     */
    public final TableField<BucketRecord, Double> SHARE = createField(DSL.name("SHARE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>BUCKET.CREATED</code>.
     */
    public final TableField<BucketRecord, LocalDateTime> CREATED = createField(DSL.name("CREATED"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>BUCKET.UPDATED</code>.
     */
    public final TableField<BucketRecord, LocalDateTime> UPDATED = createField(DSL.name("UPDATED"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private Bucket(Name alias, Table<BucketRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Bucket(Name alias, Table<BucketRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>BUCKET</code> table reference
     */
    public Bucket(String alias) {
        this(DSL.name(alias), BUCKET);
    }

    /**
     * Create an aliased <code>BUCKET</code> table reference
     */
    public Bucket(Name alias) {
        this(alias, BUCKET);
    }

    /**
     * Create a <code>BUCKET</code> table reference
     */
    public Bucket() {
        this(DSL.name("BUCKET"), null);
    }

    public <O extends Record> Bucket(Table<O> path, ForeignKey<O, BucketRecord> childPath, InverseForeignKey<O, BucketRecord> parentPath) {
        super(path, childPath, parentPath, BUCKET);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BucketPath extends Bucket implements Path<BucketRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BucketPath(Table<O> path, ForeignKey<O, BucketRecord> childPath, InverseForeignKey<O, BucketRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BucketPath(Name alias, Table<BucketRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BucketPath as(String alias) {
            return new BucketPath(DSL.name(alias), this);
        }

        @Override
        public BucketPath as(Name alias) {
            return new BucketPath(alias, this);
        }

        @Override
        public BucketPath as(Table<?> alias) {
            return new BucketPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<BucketRecord> getPrimaryKey() {
        return Keys.BUCKET__PK_BUCKET;
    }

    @Override
    public List<ForeignKey<BucketRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BUCKET__FK_BUCKET_PK_ACCOUNT);
    }

    private transient AccountPath _account;

    /**
     * Get the implicit join path to the <code>ACCOUNT</code> table.
     */
    public AccountPath account() {
        if (_account == null)
            _account = new AccountPath(this, Keys.BUCKET__FK_BUCKET_PK_ACCOUNT, null);

        return _account;
    }

    private transient ExpensePath _expense;

    /**
     * Get the implicit to-many join path to the <code>EXPENSE</code> table
     */
    public ExpensePath expense() {
        if (_expense == null)
            _expense = new ExpensePath(this, null, Keys.EXPENSE__FK_EXPENSE_PK_BUCKET.getInverseKey());

        return _expense;
    }

    @Override
    public Bucket as(String alias) {
        return new Bucket(DSL.name(alias), this);
    }

    @Override
    public Bucket as(Name alias) {
        return new Bucket(alias, this);
    }

    @Override
    public Bucket as(Table<?> alias) {
        return new Bucket(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bucket rename(String name) {
        return new Bucket(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bucket rename(Name name) {
        return new Bucket(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bucket rename(Table<?> name) {
        return new Bucket(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bucket where(Condition condition) {
        return new Bucket(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bucket where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bucket where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bucket where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bucket where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bucket where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bucket where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bucket where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bucket whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bucket whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
