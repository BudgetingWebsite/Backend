/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.tables.records;


import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.codegen.tables.Expense;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExpenseRecord extends UpdatableRecordImpl<ExpenseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>EXPENSE.UUID</code>.
     */
    public void setUuid(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>EXPENSE.UUID</code>.
     */
    public String getUuid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>EXPENSE.OWNER</code>.
     */
    public void setOwner(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>EXPENSE.OWNER</code>.
     */
    public String getOwner() {
        return (String) get(1);
    }

    /**
     * Setter for <code>EXPENSE.AMOUNT</code>.
     */
    public void setAmount(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>EXPENSE.AMOUNT</code>.
     */
    public Integer getAmount() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>EXPENSE.OCCURRED</code>.
     */
    public void setOccurred(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>EXPENSE.OCCURRED</code>.
     */
    public LocalDateTime getOccurred() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>EXPENSE.CATEGORY</code>.
     */
    public void setCategory(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>EXPENSE.CATEGORY</code>.
     */
    public String getCategory() {
        return (String) get(4);
    }

    /**
     * Setter for <code>EXPENSE.DESCRIPTION</code>.
     */
    public void setDescription(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>EXPENSE.DESCRIPTION</code>.
     */
    public String getDescription() {
        return (String) get(5);
    }

    /**
     * Setter for <code>EXPENSE.BUCKET</code>.
     */
    public void setBucket(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>EXPENSE.BUCKET</code>.
     */
    public String getBucket() {
        return (String) get(6);
    }

    /**
     * Setter for <code>EXPENSE.CREATED</code>.
     */
    public void setCreated(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>EXPENSE.CREATED</code>.
     */
    public LocalDateTime getCreated() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>EXPENSE.UPDATED</code>.
     */
    public void setUpdated(LocalDateTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>EXPENSE.UPDATED</code>.
     */
    public LocalDateTime getUpdated() {
        return (LocalDateTime) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ExpenseRecord
     */
    public ExpenseRecord() {
        super(Expense.EXPENSE);
    }

    /**
     * Create a detached, initialised ExpenseRecord
     */
    public ExpenseRecord(String uuid, String owner, Integer amount, LocalDateTime occurred, String category, String description, String bucket, LocalDateTime created, LocalDateTime updated) {
        super(Expense.EXPENSE);

        setUuid(uuid);
        setOwner(owner);
        setAmount(amount);
        setOccurred(occurred);
        setCategory(category);
        setDescription(description);
        setBucket(bucket);
        setCreated(created);
        setUpdated(updated);
        resetChangedOnNotNull();
    }
}
