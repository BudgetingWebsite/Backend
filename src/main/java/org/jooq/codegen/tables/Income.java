/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.codegen.DefaultSchema;
import org.jooq.codegen.Keys;
import org.jooq.codegen.tables.Account.AccountPath;
import org.jooq.codegen.tables.records.IncomeRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Income extends TableImpl<IncomeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>income</code>
     */
    public static final Income INCOME = new Income();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IncomeRecord> getRecordType() {
        return IncomeRecord.class;
    }

    /**
     * The column <code>income.uuid</code>.
     */
    public final TableField<IncomeRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>income.owner</code>.
     */
    public final TableField<IncomeRecord, String> OWNER = createField(DSL.name("owner"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>income.amount</code>.
     */
    public final TableField<IncomeRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>income.occurred</code>.
     */
    public final TableField<IncomeRecord, LocalDateTime> OCCURRED = createField(DSL.name("occurred"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>income.category</code>.
     */
    public final TableField<IncomeRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>income.description</code>.
     */
    public final TableField<IncomeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>income.created</code>.
     */
    public final TableField<IncomeRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>income.updated</code>.
     */
    public final TableField<IncomeRecord, LocalDateTime> UPDATED = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private Income(Name alias, Table<IncomeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Income(Name alias, Table<IncomeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>income</code> table reference
     */
    public Income(String alias) {
        this(DSL.name(alias), INCOME);
    }

    /**
     * Create an aliased <code>income</code> table reference
     */
    public Income(Name alias) {
        this(alias, INCOME);
    }

    /**
     * Create a <code>income</code> table reference
     */
    public Income() {
        this(DSL.name("income"), null);
    }

    public <O extends Record> Income(Table<O> path, ForeignKey<O, IncomeRecord> childPath, InverseForeignKey<O, IncomeRecord> parentPath) {
        super(path, childPath, parentPath, INCOME);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class IncomePath extends Income implements Path<IncomeRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> IncomePath(Table<O> path, ForeignKey<O, IncomeRecord> childPath, InverseForeignKey<O, IncomeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private IncomePath(Name alias, Table<IncomeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public IncomePath as(String alias) {
            return new IncomePath(DSL.name(alias), this);
        }

        @Override
        public IncomePath as(Name alias) {
            return new IncomePath(alias, this);
        }

        @Override
        public IncomePath as(Table<?> alias) {
            return new IncomePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<IncomeRecord> getPrimaryKey() {
        return Keys.INCOME__PK_INCOME;
    }

    @Override
    public List<ForeignKey<IncomeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INCOME__FK_INCOME_PK_ACCOUNT);
    }

    private transient AccountPath _account;

    /**
     * Get the implicit join path to the <code>account</code> table.
     */
    public AccountPath account() {
        if (_account == null)
            _account = new AccountPath(this, Keys.INCOME__FK_INCOME_PK_ACCOUNT, null);

        return _account;
    }

    @Override
    public Income as(String alias) {
        return new Income(DSL.name(alias), this);
    }

    @Override
    public Income as(Name alias) {
        return new Income(alias, this);
    }

    @Override
    public Income as(Table<?> alias) {
        return new Income(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Income rename(String name) {
        return new Income(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Income rename(Name name) {
        return new Income(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Income rename(Table<?> name) {
        return new Income(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Income where(Condition condition) {
        return new Income(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Income where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Income where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Income where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Income where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Income where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Income where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Income where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Income whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Income whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
